% Self, Justin
% Fall 2022
% Cal Poly Aerospace Engineering Department
% Load Cell Calibration FUTEK MTA400

close all; clear all; clc;

%% Check extraneous load factors for testing (According to the Futek MTA400
% manual)

% Define variables for sigmaMAX equation
a = 52.5; 
b = 52.5; 
c = 10.5;
d = 20;
e = 20;
f = 37.5;
Mx = 0; % not measuring moments here
My = Mx;
Mz = Mx;

% Enter your heaviest loads for testing.
Maxload = 12.094; % lbs

% Assume single axis loading only with no Moments.
Fy = 0;
Fz = 0;

sigmamax = a* Maxload + b*Fy + c*Fz + d*Mx + e*My + f*Mz; % max loading conditions for this test.
disp("Sigma max is: " + sigmamax + " lbs")
disp("Don't go near this weight for this test.")
warning("Take this weight into account when using MOMENT ARMS.")

%% Create Known Load matrix
% Matrix B contains known loads for calibration.
% The matrix contains concatenated data for all three axes (x,y,z) for six
% weight loads including zero mass. 

% all weights are in lbs.
W0 = 0;
W1 = 9.616;
W2 = 2.478;
W3 = 2.212;
W4 = 4.690;
W5 = 12.094;

% 100 rows for each weight x 5 weights = 1500
% 100 rows for zero weight == 1600 total rows
% 3 columns: Fx, Fy, Fz

% Preallocate B for speed
B = zeros(1600,3); 

% rows 1:100 are the zero load test.

% Populate the X column
B(101:200,1) = W1; 
B(201:300,1) = W2;
B(301:400,1) = W3;
B(401:500,1) = W4;
B(501:600,1) = W5;

% Populate the Y column
B(601:700,2) = W1;
B(701:800,2) = W2;
B(801:900,2) = W3;
B(901:1000,2) = W4;
B(1001:1100,2) = W5;

% Populate the Z column
B(1101:1200,3) = W1;
B(1201:1300,3) = W2;
B(1301:1400,3) = W3;
B(1401:1500,3) = W4;
B(1501:1600,3) = W5;


%% Import Test Data
% import data from static load testing.
% Matrix A contains the test data and is concatenated in the same format as
% B is. 

% Import x-axis test data
x0 = importdata("x_axis_run0.mat");
x1 = importdata("w1x_axis_run1.mat");
x2 = importdata("w2x_axis_run1.mat");
x3 = importdata("w3x_axis_run1.mat");
x4 = importdata("w4x_axis_run1.mat");
x5 = importdata("w5x_axis_run1.mat");

% ZERO DATA only here
x0 = x0.F(:,1:3); % ZERO data

% convert to variables
x1 = x1.F(:,1:3); % W1
x2 = x2.F(:,1:3); % W2
x3 = x3.F(:,1:3); % W3
x4 = x4.F(:,1:3); % W4
x5 = x5.F(:,1:3); % W5

% Import y-axis test data
y1 = importdata("w1y_axis_run1.mat");
y2 = importdata("w2y_axis_run1.mat");
y3 = importdata("w3y_axis_run1.mat");
y4 = importdata("w4y_axis_run1.mat");
y5 = importdata("w5y_axis_run1.mat");

% convert to variables
y1 = y1.F(:,1:3); % W1
y2 = y2.F(:,1:3); % W2
y3 = y3.F(:,1:3); % W3
y4 = y4.F(:,1:3); % W4
y5 = y5.F(:,1:3); % W5

% Import z-axis test data
z1 = importdata("w1z_axis_run1.mat");
z2 = importdata("w2z_axis_run1.mat");
z3 = importdata("w3z_axis_run1.mat");
z4 = importdata("w4z_axis_run1.mat");
z5 = importdata("w5z_axis_run1.mat");

% convert to variables
z1 = z1.F(:,1:3); % W1
z2 = z2.F(:,1:3); % W2
z3 = z3.F(:,1:3); % W3
z4 = z4.F(:,1:3); % W4
z5 = z5.F(:,1:3); % W5

% Let each variable be a matrix section, then add them up
Xsection = [x1; x2; x3; x4; x5];
Ysection = [y1; y2; y3; y4; y5];
Zsection = [z1; z2; z3; z4; z5];

%% Build the Test Matrix, A

% Preallocate A for speed
A = zeros(1600,3);

% Enter test values
A(1:100,:) = x0; % zero weight, all axes

A(101:600,:) = Xsection; % all x-axis test values
A(601:1100,:) = Ysection; % all y-axis test values
A(1101:1600,:) = Zsection; % all z-axis test values

%% Perform Calibration Matrix multiplication

% AAtranspose = A*A';
% X = B * A' * inv(AAtranspose);

X = inv(A'*A) * A' * B; % check X: should be a 3x3 


% Where 
    % X is the Futek Calibration Matrix
    % B is the known (or applied) load during testing
    % A is the Futek Load response (or test data)
   

% Report results
figure
hold on
plot(B(:,1),A(:,1)) % Fx
plot(B(:,2),A(:,2)) % Fy
plot(B(:,3),A(:,3)) % Fz


% Graph pretty 
ylim padded 
xlim tight 
xLab = xlabel('Applied Load [lbs]'); 
yLab = ylabel('Futek Load (test response) [lbs]'); 
plotTitle = title(['{\itFutek Load Cell Calibration Curve}']); 
set(plotTitle,'FontSize',14,'FontWeight','bold') 
set(gca,'FontName','Palatino Linotype') 
set([xLab, yLab],'FontName','Palatino Linotype') 
set(gca,'FontSize', 9) 
set([xLab, yLab],'FontSize', 12) 
grid on 
legend('Fx','Fy','Fz', 'Location', 'best')

